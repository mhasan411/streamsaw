// Generated by Dagger (https://dagger.dev).
package com.streamsaw.di.module;

import com.streamsaw.ui.player.fsm.concrete.factory.StateFactory;
import com.streamsaw.ui.player.fsm.state_machine.FsmPlayer;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;

@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class AppModule_ProvideFsmPlayerFactory implements Factory<FsmPlayer> {
  private final AppModule module;

  private final Provider<StateFactory> factoryProvider;

  public AppModule_ProvideFsmPlayerFactory(AppModule module,
      Provider<StateFactory> factoryProvider) {
    this.module = module;
    this.factoryProvider = factoryProvider;
  }

  @Override
  public FsmPlayer get() {
    return provideFsmPlayer(module, factoryProvider.get());
  }

  public static AppModule_ProvideFsmPlayerFactory create(AppModule module,
      Provider<StateFactory> factoryProvider) {
    return new AppModule_ProvideFsmPlayerFactory(module, factoryProvider);
  }

  public static FsmPlayer provideFsmPlayer(AppModule instance, StateFactory factory) {
    return Preconditions.checkNotNull(instance.provideFsmPlayer(factory), "Cannot return null from a non-@Nullable @Provides method");
  }
}
