// Generated by Dagger (https://dagger.dev).
package com.streamsaw.data.repository;

import com.streamsaw.data.remote.ApiInterface;
import com.streamsaw.ui.manager.TokenManager;
import dagger.internal.Factory;
import javax.inject.Provider;

@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class AuthRepository_Factory implements Factory<AuthRepository> {
  private final Provider<ApiInterface> requestLoginProvider;

  private final Provider<TokenManager> tokenManagerProvider;

  private final Provider<ApiInterface> requestAuthProvider;

  private final Provider<TokenManager> tokenManagerProvider2;

  public AuthRepository_Factory(Provider<ApiInterface> requestLoginProvider,
      Provider<TokenManager> tokenManagerProvider, Provider<ApiInterface> requestAuthProvider,
      Provider<TokenManager> tokenManagerProvider2) {
    this.requestLoginProvider = requestLoginProvider;
    this.tokenManagerProvider = tokenManagerProvider;
    this.requestAuthProvider = requestAuthProvider;
    this.tokenManagerProvider2 = tokenManagerProvider2;
  }

  @Override
  public AuthRepository get() {
    AuthRepository instance = newInstance(requestLoginProvider.get(), tokenManagerProvider.get());
    AuthRepository_MembersInjector.injectRequestAuth(instance, requestAuthProvider.get());
    AuthRepository_MembersInjector.injectTokenManager(instance, tokenManagerProvider2.get());
    return instance;
  }

  public static AuthRepository_Factory create(Provider<ApiInterface> requestLoginProvider,
      Provider<TokenManager> tokenManagerProvider, Provider<ApiInterface> requestAuthProvider,
      Provider<TokenManager> tokenManagerProvider2) {
    return new AuthRepository_Factory(requestLoginProvider, tokenManagerProvider, requestAuthProvider, tokenManagerProvider2);
  }

  public static AuthRepository newInstance(ApiInterface requestLogin, TokenManager tokenManager) {
    return new AuthRepository(requestLogin, tokenManager);
  }
}
