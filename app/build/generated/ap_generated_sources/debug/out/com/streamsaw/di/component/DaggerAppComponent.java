// Generated by Dagger (https://dagger.dev).
package com.streamsaw.di.component;

import android.app.Application;
import android.content.SharedPreferences;
import androidx.lifecycle.ViewModel;
import com.google.common.collect.ImmutableMap;
import com.google.errorprone.annotations.CanIgnoreReturnValue;
import com.streamsaw.EasyPlexApp;
import com.streamsaw.EasyPlexApp_MembersInjector;
import com.streamsaw.data.local.EasyPlexDatabase;
import com.streamsaw.data.local.dao.DownloadDao;
import com.streamsaw.data.local.dao.FavoriteDao;
import com.streamsaw.data.local.dao.HistoryDao;
import com.streamsaw.data.local.dao.StreamListDao;
import com.streamsaw.data.model.ads.AdRetriever;
import com.streamsaw.data.model.ads.CuePointsRetriever;
import com.streamsaw.data.remote.ApiInterface;
import com.streamsaw.data.repository.AnimeRepository;
import com.streamsaw.data.repository.AnimeRepository_Factory;
import com.streamsaw.data.repository.AuthRepository;
import com.streamsaw.data.repository.AuthRepository_Factory;
import com.streamsaw.data.repository.MediaRepository;
import com.streamsaw.data.repository.MediaRepository_Factory;
import com.streamsaw.data.repository.SettingsRepository;
import com.streamsaw.data.repository.SettingsRepository_Factory;
import com.streamsaw.data.repository.SettingsRepository_MembersInjector;
import com.streamsaw.di.module.ActivityModule_ContributeAnimeDetailsActivity;
import com.streamsaw.di.module.ActivityModule_ContributeDoubleViewTubiPlayerActivity;
import com.streamsaw.di.module.ActivityModule_ContributeDownloadList;
import com.streamsaw.di.module.ActivityModule_ContributeEditProfileActivity;
import com.streamsaw.di.module.ActivityModule_ContributeLoginActivity;
import com.streamsaw.di.module.ActivityModule_ContributeMainActivity;
import com.streamsaw.di.module.ActivityModule_ContributeMovieDetailActivity;
import com.streamsaw.di.module.ActivityModule_ContributeNotificationManager;
import com.streamsaw.di.module.ActivityModule_ContributePayment;
import com.streamsaw.di.module.ActivityModule_ContributePaymentDetails;
import com.streamsaw.di.module.ActivityModule_ContributeRegisterActivity;
import com.streamsaw.di.module.ActivityModule_ContributeSerieDetailActivity;
import com.streamsaw.di.module.ActivityModule_ContributeSplashActivity;
import com.streamsaw.di.module.ActivityModule_ContributeTrailerPreviewActivity;
import com.streamsaw.di.module.ActivityModule_ContributeUpcomingTitlesActivity;
import com.streamsaw.di.module.AppModule;
import com.streamsaw.di.module.AppModule_ProvideAdInterfaceNoPrerollFactory;
import com.streamsaw.di.module.AppModule_ProvideAdPlayingMonitorFactory;
import com.streamsaw.di.module.AppModule_ProvideAdRetrieverFactory;
import com.streamsaw.di.module.AppModule_ProvideAdsManagerFactory;
import com.streamsaw.di.module.AppModule_ProvideAuthManagerFactory;
import com.streamsaw.di.module.AppModule_ProvideComponentControllerFactory;
import com.streamsaw.di.module.AppModule_ProvideControllerFactory;
import com.streamsaw.di.module.AppModule_ProvideCuePointMonitorFactory;
import com.streamsaw.di.module.AppModule_ProvideCuePointsRetrieverFactory;
import com.streamsaw.di.module.AppModule_ProvideDbFactory;
import com.streamsaw.di.module.AppModule_ProvideFavMoviesDaoFactory;
import com.streamsaw.di.module.AppModule_ProvideFsmPlayerFactory;
import com.streamsaw.di.module.AppModule_ProvideHistoryDaoFactory;
import com.streamsaw.di.module.AppModule_ProvideMoviesServiceFactory;
import com.streamsaw.di.module.AppModule_ProvideMoviesServiceImdbFactory;
import com.streamsaw.di.module.AppModule_ProvideProgressDaoFactory;
import com.streamsaw.di.module.AppModule_ProvideServiceAppFactory;
import com.streamsaw.di.module.AppModule_ProvideServiceAuthFactory;
import com.streamsaw.di.module.AppModule_ProvideServiceStatusFactory;
import com.streamsaw.di.module.AppModule_ProvideSettingsManagerFactory;
import com.streamsaw.di.module.AppModule_ProvideSharedPreferencesFactory;
import com.streamsaw.di.module.AppModule_ProvideStateFactoryFactory;
import com.streamsaw.di.module.AppModule_ProvideStatusManagerFactory;
import com.streamsaw.di.module.AppModule_ProvideStreamyDaoFactory;
import com.streamsaw.di.module.AppModule_ProvideTokenManagerFactory;
import com.streamsaw.di.module.AppModule_ProvideVpaidClientFactory;
import com.streamsaw.di.module.AppModule_ProvidesSharedPreferencesEditorFactory;
import com.streamsaw.di.module.FragmentBuildersModule_ContributeAnimesFragment;
import com.streamsaw.di.module.FragmentBuildersModule_ContributeDiscoverFragment;
import com.streamsaw.di.module.FragmentBuildersModule_ContributeHomeFragment;
import com.streamsaw.di.module.FragmentBuildersModule_ContributeLibraryFragment;
import com.streamsaw.di.module.FragmentBuildersModule_ContributeLiveFragment;
import com.streamsaw.di.module.FragmentBuildersModule_ContributeMoviesFragment;
import com.streamsaw.di.module.FragmentBuildersModule_ContributeMyListMoviesFragment;
import com.streamsaw.di.module.FragmentBuildersModule_ContributeSeriesFragment;
import com.streamsaw.di.module.FragmentBuildersModule_ContributeSettingsFragment;
import com.streamsaw.di.module.FragmentBuildersModule_ContributeTrackSelectionDialog;
import com.streamsaw.di.module.FragmentBuildersModule_ContributeUpcomingFragment;
import com.streamsaw.ui.animes.AnimeDetailsActivity;
import com.streamsaw.ui.animes.AnimeDetailsActivity_MembersInjector;
import com.streamsaw.ui.base.BaseActivity;
import com.streamsaw.ui.base.BaseActivity_MembersInjector;
import com.streamsaw.ui.download.DownloadList;
import com.streamsaw.ui.download.DownloadList_MembersInjector;
import com.streamsaw.ui.home.HomeFragment;
import com.streamsaw.ui.home.HomeFragment_MembersInjector;
import com.streamsaw.ui.library.AnimesFragment;
import com.streamsaw.ui.library.AnimesFragment_MembersInjector;
import com.streamsaw.ui.library.LibraryFragment;
import com.streamsaw.ui.library.LibraryFragment_MembersInjector;
import com.streamsaw.ui.library.MoviesFragment;
import com.streamsaw.ui.library.MoviesFragment_MembersInjector;
import com.streamsaw.ui.library.SeriesFragment;
import com.streamsaw.ui.library.SeriesFragment_MembersInjector;
import com.streamsaw.ui.login.LoginActivity;
import com.streamsaw.ui.login.LoginActivity_MembersInjector;
import com.streamsaw.ui.manager.AdsManager;
import com.streamsaw.ui.manager.AuthManager;
import com.streamsaw.ui.manager.SettingsManager;
import com.streamsaw.ui.manager.StatusManager;
import com.streamsaw.ui.manager.TokenManager;
import com.streamsaw.ui.moviedetails.MovieDetailsActivity;
import com.streamsaw.ui.moviedetails.MovieDetailsActivity_MembersInjector;
import com.streamsaw.ui.mylist.MyListFragment;
import com.streamsaw.ui.mylist.MyListFragment_MembersInjector;
import com.streamsaw.ui.notifications.NotificationManager;
import com.streamsaw.ui.notifications.NotificationManager_MembersInjector;
import com.streamsaw.ui.payment.Payment;
import com.streamsaw.ui.payment.PaymentDetails;
import com.streamsaw.ui.payment.PaymentDetails_MembersInjector;
import com.streamsaw.ui.payment.Payment_MembersInjector;
import com.streamsaw.ui.player.activities.EasyPlexMainPlayer;
import com.streamsaw.ui.player.activities.EasyPlexMainPlayer_MembersInjector;
import com.streamsaw.ui.player.activities.EasyPlexPlayerActivity_MembersInjector;
import com.streamsaw.ui.player.bindings.PlayerController;
import com.streamsaw.ui.player.bindings.PlayerController_Factory;
import com.streamsaw.ui.player.bindings.PlayerController_MembersInjector;
import com.streamsaw.ui.player.controller.PlayerAdLogicController;
import com.streamsaw.ui.player.controller.PlayerUIController;
import com.streamsaw.ui.player.fsm.callback.AdInterface;
import com.streamsaw.ui.player.fsm.concrete.factory.StateFactory;
import com.streamsaw.ui.player.fsm.listener.AdPlayingMonitor;
import com.streamsaw.ui.player.fsm.listener.CuePointMonitor;
import com.streamsaw.ui.player.fsm.state_machine.FsmPlayer;
import com.streamsaw.ui.player.interfaces.VpaidClient;
import com.streamsaw.ui.player.utilities.TrackSelectionDialog;
import com.streamsaw.ui.profile.EditProfileActivity;
import com.streamsaw.ui.profile.EditProfileActivity_MembersInjector;
import com.streamsaw.ui.register.RegisterActivity;
import com.streamsaw.ui.register.RegisterActivity_MembersInjector;
import com.streamsaw.ui.search.DiscoverFragment;
import com.streamsaw.ui.search.DiscoverFragment_MembersInjector;
import com.streamsaw.ui.seriedetails.SerieDetailsActivity;
import com.streamsaw.ui.seriedetails.SerieDetailsActivity_MembersInjector;
import com.streamsaw.ui.settings.SettingsActivity;
import com.streamsaw.ui.settings.SettingsActivity_MembersInjector;
import com.streamsaw.ui.splash.SplashActivity;
import com.streamsaw.ui.splash.SplashActivity_MembersInjector;
import com.streamsaw.ui.streaming.StreamingFragment;
import com.streamsaw.ui.streaming.StreamingFragment_MembersInjector;
import com.streamsaw.ui.trailer.TrailerPreviewActivity;
import com.streamsaw.ui.trailer.TrailerPreviewActivity_MembersInjector;
import com.streamsaw.ui.upcoming.UpComingFragment;
import com.streamsaw.ui.upcoming.UpComingFragment_MembersInjector;
import com.streamsaw.ui.upcoming.UpcomingTitlesActivity;
import com.streamsaw.ui.upcoming.UpcomingTitlesActivity_MembersInjector;
import com.streamsaw.ui.viewmodels.AnimeViewModel;
import com.streamsaw.ui.viewmodels.AnimeViewModel_Factory;
import com.streamsaw.ui.viewmodels.GenresViewModel;
import com.streamsaw.ui.viewmodels.GenresViewModel_Factory;
import com.streamsaw.ui.viewmodels.HomeViewModel;
import com.streamsaw.ui.viewmodels.HomeViewModel_Factory;
import com.streamsaw.ui.viewmodels.LoginViewModel;
import com.streamsaw.ui.viewmodels.LoginViewModel_Factory;
import com.streamsaw.ui.viewmodels.MovieDetailViewModel;
import com.streamsaw.ui.viewmodels.MovieDetailViewModel_Factory;
import com.streamsaw.ui.viewmodels.MoviesListViewModel;
import com.streamsaw.ui.viewmodels.MoviesListViewModel_Factory;
import com.streamsaw.ui.viewmodels.RegisterViewModel;
import com.streamsaw.ui.viewmodels.RegisterViewModel_Factory;
import com.streamsaw.ui.viewmodels.SearchViewModel;
import com.streamsaw.ui.viewmodels.SearchViewModel_Factory;
import com.streamsaw.ui.viewmodels.SerieDetailViewModel;
import com.streamsaw.ui.viewmodels.SerieDetailViewModel_Factory;
import com.streamsaw.ui.viewmodels.SettingsViewModel;
import com.streamsaw.ui.viewmodels.SettingsViewModel_Factory;
import com.streamsaw.ui.viewmodels.StreamingDetailViewModel;
import com.streamsaw.ui.viewmodels.StreamingDetailViewModel_Factory;
import com.streamsaw.ui.viewmodels.StreamingGenresViewModel;
import com.streamsaw.ui.viewmodels.StreamingGenresViewModel_Factory;
import com.streamsaw.ui.viewmodels.UpcomingViewModel;
import com.streamsaw.ui.viewmodels.UpcomingViewModel_Factory;
import com.streamsaw.viewmodel.MoviesViewModelFactory;
import com.streamsaw.viewmodel.MoviesViewModelFactory_Factory;
import dagger.android.AndroidInjector;
import dagger.android.DispatchingAndroidInjector;
import dagger.android.DispatchingAndroidInjector_Factory;
import dagger.internal.DoubleCheck;
import dagger.internal.InstanceFactory;
import dagger.internal.MapProviderFactory;
import dagger.internal.Preconditions;
import java.util.Map;
import javax.inject.Provider;

@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class DaggerAppComponent implements AppComponent {
  private Provider<ActivityModule_ContributeMainActivity.BaseActivitySubcomponent.Factory> baseActivitySubcomponentFactoryProvider;

  private Provider<ActivityModule_ContributePayment.PaymentSubcomponent.Factory> paymentSubcomponentFactoryProvider;

  private Provider<ActivityModule_ContributeNotificationManager.NotificationManagerSubcomponent.Factory> notificationManagerSubcomponentFactoryProvider;

  private Provider<ActivityModule_ContributeDownloadList.DownloadListSubcomponent.Factory> downloadListSubcomponentFactoryProvider;

  private Provider<ActivityModule_ContributePaymentDetails.PaymentDetailsSubcomponent.Factory> paymentDetailsSubcomponentFactoryProvider;

  private Provider<ActivityModule_ContributeEditProfileActivity.EditProfileActivitySubcomponent.Factory> editProfileActivitySubcomponentFactoryProvider;

  private Provider<ActivityModule_ContributeMovieDetailActivity.MovieDetailsActivitySubcomponent.Factory> movieDetailsActivitySubcomponentFactoryProvider;

  private Provider<ActivityModule_ContributeSerieDetailActivity.SerieDetailsActivitySubcomponent.Factory> serieDetailsActivitySubcomponentFactoryProvider;

  private Provider<ActivityModule_ContributeLoginActivity.LoginActivitySubcomponent.Factory> loginActivitySubcomponentFactoryProvider;

  private Provider<ActivityModule_ContributeRegisterActivity.RegisterActivitySubcomponent.Factory> registerActivitySubcomponentFactoryProvider;

  private Provider<ActivityModule_ContributeTrailerPreviewActivity.TrailerPreviewActivitySubcomponent.Factory> trailerPreviewActivitySubcomponentFactoryProvider;

  private Provider<ActivityModule_ContributeUpcomingTitlesActivity.UpcomingTitlesActivitySubcomponent.Factory> upcomingTitlesActivitySubcomponentFactoryProvider;

  private Provider<ActivityModule_ContributeAnimeDetailsActivity.AnimeDetailsActivitySubcomponent.Factory> animeDetailsActivitySubcomponentFactoryProvider;

  private Provider<ActivityModule_ContributeDoubleViewTubiPlayerActivity.EasyPlexMainPlayerSubcomponent.Factory> easyPlexMainPlayerSubcomponentFactoryProvider;

  private Provider<ActivityModule_ContributeSplashActivity.SplashActivitySubcomponent.Factory> splashActivitySubcomponentFactoryProvider;

  private Provider<FragmentBuildersModule_ContributeTrackSelectionDialog.TrackSelectionDialogSubcomponent.Factory> trackSelectionDialogSubcomponentFactoryProvider;

  private Provider<FragmentBuildersModule_ContributeHomeFragment.HomeFragmentSubcomponent.Factory> homeFragmentSubcomponentFactoryProvider;

  private Provider<FragmentBuildersModule_ContributeUpcomingFragment.UpComingFragmentSubcomponent.Factory> upComingFragmentSubcomponentFactoryProvider;

  private Provider<FragmentBuildersModule_ContributeDiscoverFragment.DiscoverFragmentSubcomponent.Factory> discoverFragmentSubcomponentFactoryProvider;

  private Provider<FragmentBuildersModule_ContributeMoviesFragment.MoviesFragmentSubcomponent.Factory> moviesFragmentSubcomponentFactoryProvider;

  private Provider<FragmentBuildersModule_ContributeSeriesFragment.SeriesFragmentSubcomponent.Factory> seriesFragmentSubcomponentFactoryProvider;

  private Provider<FragmentBuildersModule_ContributeLibraryFragment.LibraryFragmentSubcomponent.Factory> libraryFragmentSubcomponentFactoryProvider;

  private Provider<FragmentBuildersModule_ContributeMyListMoviesFragment.MyListFragmentSubcomponent.Factory> myListFragmentSubcomponentFactoryProvider;

  private Provider<FragmentBuildersModule_ContributeAnimesFragment.AnimesFragmentSubcomponent.Factory> animesFragmentSubcomponentFactoryProvider;

  private Provider<FragmentBuildersModule_ContributeLiveFragment.StreamingFragmentSubcomponent.Factory> streamingFragmentSubcomponentFactoryProvider;

  private Provider<FragmentBuildersModule_ContributeSettingsFragment.SettingsActivitySubcomponent.Factory> settingsActivitySubcomponentFactoryProvider;

  private Provider<Application> applicationProvider;

  private Provider<SettingsManager> provideSettingsManagerProvider;

  private Provider<PlayerUIController> provideControllerProvider;

  private Provider<AdsManager> provideAdsManagerProvider;

  private Provider<AuthManager> provideAuthManagerProvider;

  private Provider<SharedPreferences> provideSharedPreferencesProvider;

  private Provider<ApiInterface> provideMoviesServiceProvider;

  private Provider<ApiInterface> provideServiceStatusProvider;

  private Provider<EasyPlexDatabase> provideDbProvider;

  private Provider<FavoriteDao> provideFavMoviesDaoProvider;

  private Provider<DownloadDao> provideProgressDaoProvider;

  private Provider<HistoryDao> provideHistoryDaoProvider;

  private Provider<StreamListDao> provideStreamyDaoProvider;

  private Provider<ApiInterface> provideMoviesServiceImdbProvider;

  private Provider<ApiInterface> provideServiceAppProvider;

  private Provider<MediaRepository> mediaRepositoryProvider;

  private Provider<StateFactory> provideStateFactoryProvider;

  private Provider<FsmPlayer> provideFsmPlayerProvider;

  private Provider<AdPlayingMonitor> provideAdPlayingMonitorProvider;

  private Provider<CuePointMonitor> provideCuePointMonitorProvider;

  private Provider<AdRetriever> provideAdRetrieverProvider;

  private Provider<CuePointsRetriever> provideCuePointsRetrieverProvider;

  private Provider<AdInterface> provideAdInterfaceNoPrerollProvider;

  private Provider<PlayerAdLogicController> provideComponentControllerProvider;

  private Provider<VpaidClient> provideVpaidClientProvider;

  private Provider<StatusManager> provideStatusManagerProvider;

  private Provider<TokenManager> provideTokenManagerProvider;

  private Provider<SharedPreferences.Editor> providesSharedPreferencesEditorProvider;

  private Provider<AnimeRepository> animeRepositoryProvider;

  private Provider<HomeViewModel> homeViewModelProvider;

  private Provider<UpcomingViewModel> upcomingViewModelProvider;

  private Provider<MovieDetailViewModel> movieDetailViewModelProvider;

  private Provider<SerieDetailViewModel> serieDetailViewModelProvider;

  private Provider<SearchViewModel> searchViewModelProvider;

  private Provider<ApiInterface> provideServiceAuthProvider;

  private Provider<AuthRepository> authRepositoryProvider;

  private Provider<LoginViewModel> loginViewModelProvider;

  private Provider<RegisterViewModel> registerViewModelProvider;

  private Provider<GenresViewModel> genresViewModelProvider;

  private Provider<SettingsRepository> settingsRepositoryProvider;

  private Provider<SettingsViewModel> settingsViewModelProvider;

  private Provider<MoviesListViewModel> moviesListViewModelProvider;

  private Provider<AnimeViewModel> animeViewModelProvider;

  private Provider<StreamingDetailViewModel> streamingDetailViewModelProvider;

  private Provider<StreamingGenresViewModel> streamingGenresViewModelProvider;

  private Provider<Map<Class<? extends ViewModel>, Provider<ViewModel>>> mapOfClassOfAndProviderOfViewModelProvider;

  private Provider<MoviesViewModelFactory> moviesViewModelFactoryProvider;

  private DaggerAppComponent(AppModule appModuleParam, Application applicationParam) {

    initialize(appModuleParam, applicationParam);
  }

  public static AppComponent.Builder builder() {
    return new Builder();
  }

  private Map<Class<?>, Provider<AndroidInjector.Factory<?>>> getMapOfClassOfAndProviderOfAndroidInjectorFactoryOf(
      ) {
    return ImmutableMap.<Class<?>, Provider<AndroidInjector.Factory<?>>>builderWithExpectedSize(26).put(BaseActivity.class, (Provider) baseActivitySubcomponentFactoryProvider).put(Payment.class, (Provider) paymentSubcomponentFactoryProvider).put(NotificationManager.class, (Provider) notificationManagerSubcomponentFactoryProvider).put(DownloadList.class, (Provider) downloadListSubcomponentFactoryProvider).put(PaymentDetails.class, (Provider) paymentDetailsSubcomponentFactoryProvider).put(EditProfileActivity.class, (Provider) editProfileActivitySubcomponentFactoryProvider).put(MovieDetailsActivity.class, (Provider) movieDetailsActivitySubcomponentFactoryProvider).put(SerieDetailsActivity.class, (Provider) serieDetailsActivitySubcomponentFactoryProvider).put(LoginActivity.class, (Provider) loginActivitySubcomponentFactoryProvider).put(RegisterActivity.class, (Provider) registerActivitySubcomponentFactoryProvider).put(TrailerPreviewActivity.class, (Provider) trailerPreviewActivitySubcomponentFactoryProvider).put(UpcomingTitlesActivity.class, (Provider) upcomingTitlesActivitySubcomponentFactoryProvider).put(AnimeDetailsActivity.class, (Provider) animeDetailsActivitySubcomponentFactoryProvider).put(EasyPlexMainPlayer.class, (Provider) easyPlexMainPlayerSubcomponentFactoryProvider).put(SplashActivity.class, (Provider) splashActivitySubcomponentFactoryProvider).put(TrackSelectionDialog.class, (Provider) trackSelectionDialogSubcomponentFactoryProvider).put(HomeFragment.class, (Provider) homeFragmentSubcomponentFactoryProvider).put(UpComingFragment.class, (Provider) upComingFragmentSubcomponentFactoryProvider).put(DiscoverFragment.class, (Provider) discoverFragmentSubcomponentFactoryProvider).put(MoviesFragment.class, (Provider) moviesFragmentSubcomponentFactoryProvider).put(SeriesFragment.class, (Provider) seriesFragmentSubcomponentFactoryProvider).put(LibraryFragment.class, (Provider) libraryFragmentSubcomponentFactoryProvider).put(MyListFragment.class, (Provider) myListFragmentSubcomponentFactoryProvider).put(AnimesFragment.class, (Provider) animesFragmentSubcomponentFactoryProvider).put(StreamingFragment.class, (Provider) streamingFragmentSubcomponentFactoryProvider).put(SettingsActivity.class, (Provider) settingsActivitySubcomponentFactoryProvider).build();
  }

  private DispatchingAndroidInjector<Object> getDispatchingAndroidInjectorOfObject() {
    return DispatchingAndroidInjector_Factory.newInstance(getMapOfClassOfAndProviderOfAndroidInjectorFactoryOf(), ImmutableMap.<String, Provider<AndroidInjector.Factory<?>>>of());
  }

  private SettingsRepository getSettingsRepository() {
    return injectSettingsRepository(SettingsRepository_Factory.newInstance(provideMoviesServiceProvider.get()));
  }

  private PlayerController getPlayerController() {
    return injectPlayerController(PlayerController_Factory.newInstance());
  }

  @SuppressWarnings("unchecked")
  private void initialize(final AppModule appModuleParam, final Application applicationParam) {
    this.baseActivitySubcomponentFactoryProvider = new Provider<ActivityModule_ContributeMainActivity.BaseActivitySubcomponent.Factory>() {
      @Override
      public ActivityModule_ContributeMainActivity.BaseActivitySubcomponent.Factory get() {
        return new BaseActivitySubcomponentFactory();
      }
    };
    this.paymentSubcomponentFactoryProvider = new Provider<ActivityModule_ContributePayment.PaymentSubcomponent.Factory>() {
      @Override
      public ActivityModule_ContributePayment.PaymentSubcomponent.Factory get() {
        return new PaymentSubcomponentFactory();
      }
    };
    this.notificationManagerSubcomponentFactoryProvider = new Provider<ActivityModule_ContributeNotificationManager.NotificationManagerSubcomponent.Factory>() {
      @Override
      public ActivityModule_ContributeNotificationManager.NotificationManagerSubcomponent.Factory get(
          ) {
        return new NotificationManagerSubcomponentFactory();
      }
    };
    this.downloadListSubcomponentFactoryProvider = new Provider<ActivityModule_ContributeDownloadList.DownloadListSubcomponent.Factory>() {
      @Override
      public ActivityModule_ContributeDownloadList.DownloadListSubcomponent.Factory get() {
        return new DownloadListSubcomponentFactory();
      }
    };
    this.paymentDetailsSubcomponentFactoryProvider = new Provider<ActivityModule_ContributePaymentDetails.PaymentDetailsSubcomponent.Factory>() {
      @Override
      public ActivityModule_ContributePaymentDetails.PaymentDetailsSubcomponent.Factory get() {
        return new PaymentDetailsSubcomponentFactory();
      }
    };
    this.editProfileActivitySubcomponentFactoryProvider = new Provider<ActivityModule_ContributeEditProfileActivity.EditProfileActivitySubcomponent.Factory>() {
      @Override
      public ActivityModule_ContributeEditProfileActivity.EditProfileActivitySubcomponent.Factory get(
          ) {
        return new EditProfileActivitySubcomponentFactory();
      }
    };
    this.movieDetailsActivitySubcomponentFactoryProvider = new Provider<ActivityModule_ContributeMovieDetailActivity.MovieDetailsActivitySubcomponent.Factory>() {
      @Override
      public ActivityModule_ContributeMovieDetailActivity.MovieDetailsActivitySubcomponent.Factory get(
          ) {
        return new MovieDetailsActivitySubcomponentFactory();
      }
    };
    this.serieDetailsActivitySubcomponentFactoryProvider = new Provider<ActivityModule_ContributeSerieDetailActivity.SerieDetailsActivitySubcomponent.Factory>() {
      @Override
      public ActivityModule_ContributeSerieDetailActivity.SerieDetailsActivitySubcomponent.Factory get(
          ) {
        return new SerieDetailsActivitySubcomponentFactory();
      }
    };
    this.loginActivitySubcomponentFactoryProvider = new Provider<ActivityModule_ContributeLoginActivity.LoginActivitySubcomponent.Factory>() {
      @Override
      public ActivityModule_ContributeLoginActivity.LoginActivitySubcomponent.Factory get() {
        return new LoginActivitySubcomponentFactory();
      }
    };
    this.registerActivitySubcomponentFactoryProvider = new Provider<ActivityModule_ContributeRegisterActivity.RegisterActivitySubcomponent.Factory>() {
      @Override
      public ActivityModule_ContributeRegisterActivity.RegisterActivitySubcomponent.Factory get() {
        return new RegisterActivitySubcomponentFactory();
      }
    };
    this.trailerPreviewActivitySubcomponentFactoryProvider = new Provider<ActivityModule_ContributeTrailerPreviewActivity.TrailerPreviewActivitySubcomponent.Factory>() {
      @Override
      public ActivityModule_ContributeTrailerPreviewActivity.TrailerPreviewActivitySubcomponent.Factory get(
          ) {
        return new TrailerPreviewActivitySubcomponentFactory();
      }
    };
    this.upcomingTitlesActivitySubcomponentFactoryProvider = new Provider<ActivityModule_ContributeUpcomingTitlesActivity.UpcomingTitlesActivitySubcomponent.Factory>() {
      @Override
      public ActivityModule_ContributeUpcomingTitlesActivity.UpcomingTitlesActivitySubcomponent.Factory get(
          ) {
        return new UpcomingTitlesActivitySubcomponentFactory();
      }
    };
    this.animeDetailsActivitySubcomponentFactoryProvider = new Provider<ActivityModule_ContributeAnimeDetailsActivity.AnimeDetailsActivitySubcomponent.Factory>() {
      @Override
      public ActivityModule_ContributeAnimeDetailsActivity.AnimeDetailsActivitySubcomponent.Factory get(
          ) {
        return new AnimeDetailsActivitySubcomponentFactory();
      }
    };
    this.easyPlexMainPlayerSubcomponentFactoryProvider = new Provider<ActivityModule_ContributeDoubleViewTubiPlayerActivity.EasyPlexMainPlayerSubcomponent.Factory>() {
      @Override
      public ActivityModule_ContributeDoubleViewTubiPlayerActivity.EasyPlexMainPlayerSubcomponent.Factory get(
          ) {
        return new EasyPlexMainPlayerSubcomponentFactory();
      }
    };
    this.splashActivitySubcomponentFactoryProvider = new Provider<ActivityModule_ContributeSplashActivity.SplashActivitySubcomponent.Factory>() {
      @Override
      public ActivityModule_ContributeSplashActivity.SplashActivitySubcomponent.Factory get() {
        return new SplashActivitySubcomponentFactory();
      }
    };
    this.trackSelectionDialogSubcomponentFactoryProvider = new Provider<FragmentBuildersModule_ContributeTrackSelectionDialog.TrackSelectionDialogSubcomponent.Factory>() {
      @Override
      public FragmentBuildersModule_ContributeTrackSelectionDialog.TrackSelectionDialogSubcomponent.Factory get(
          ) {
        return new TrackSelectionDialogSubcomponentFactory();
      }
    };
    this.homeFragmentSubcomponentFactoryProvider = new Provider<FragmentBuildersModule_ContributeHomeFragment.HomeFragmentSubcomponent.Factory>() {
      @Override
      public FragmentBuildersModule_ContributeHomeFragment.HomeFragmentSubcomponent.Factory get() {
        return new HomeFragmentSubcomponentFactory();
      }
    };
    this.upComingFragmentSubcomponentFactoryProvider = new Provider<FragmentBuildersModule_ContributeUpcomingFragment.UpComingFragmentSubcomponent.Factory>() {
      @Override
      public FragmentBuildersModule_ContributeUpcomingFragment.UpComingFragmentSubcomponent.Factory get(
          ) {
        return new UpComingFragmentSubcomponentFactory();
      }
    };
    this.discoverFragmentSubcomponentFactoryProvider = new Provider<FragmentBuildersModule_ContributeDiscoverFragment.DiscoverFragmentSubcomponent.Factory>() {
      @Override
      public FragmentBuildersModule_ContributeDiscoverFragment.DiscoverFragmentSubcomponent.Factory get(
          ) {
        return new DiscoverFragmentSubcomponentFactory();
      }
    };
    this.moviesFragmentSubcomponentFactoryProvider = new Provider<FragmentBuildersModule_ContributeMoviesFragment.MoviesFragmentSubcomponent.Factory>() {
      @Override
      public FragmentBuildersModule_ContributeMoviesFragment.MoviesFragmentSubcomponent.Factory get(
          ) {
        return new MoviesFragmentSubcomponentFactory();
      }
    };
    this.seriesFragmentSubcomponentFactoryProvider = new Provider<FragmentBuildersModule_ContributeSeriesFragment.SeriesFragmentSubcomponent.Factory>() {
      @Override
      public FragmentBuildersModule_ContributeSeriesFragment.SeriesFragmentSubcomponent.Factory get(
          ) {
        return new SeriesFragmentSubcomponentFactory();
      }
    };
    this.libraryFragmentSubcomponentFactoryProvider = new Provider<FragmentBuildersModule_ContributeLibraryFragment.LibraryFragmentSubcomponent.Factory>() {
      @Override
      public FragmentBuildersModule_ContributeLibraryFragment.LibraryFragmentSubcomponent.Factory get(
          ) {
        return new LibraryFragmentSubcomponentFactory();
      }
    };
    this.myListFragmentSubcomponentFactoryProvider = new Provider<FragmentBuildersModule_ContributeMyListMoviesFragment.MyListFragmentSubcomponent.Factory>() {
      @Override
      public FragmentBuildersModule_ContributeMyListMoviesFragment.MyListFragmentSubcomponent.Factory get(
          ) {
        return new MyListFragmentSubcomponentFactory();
      }
    };
    this.animesFragmentSubcomponentFactoryProvider = new Provider<FragmentBuildersModule_ContributeAnimesFragment.AnimesFragmentSubcomponent.Factory>() {
      @Override
      public FragmentBuildersModule_ContributeAnimesFragment.AnimesFragmentSubcomponent.Factory get(
          ) {
        return new AnimesFragmentSubcomponentFactory();
      }
    };
    this.streamingFragmentSubcomponentFactoryProvider = new Provider<FragmentBuildersModule_ContributeLiveFragment.StreamingFragmentSubcomponent.Factory>() {
      @Override
      public FragmentBuildersModule_ContributeLiveFragment.StreamingFragmentSubcomponent.Factory get(
          ) {
        return new StreamingFragmentSubcomponentFactory();
      }
    };
    this.settingsActivitySubcomponentFactoryProvider = new Provider<FragmentBuildersModule_ContributeSettingsFragment.SettingsActivitySubcomponent.Factory>() {
      @Override
      public FragmentBuildersModule_ContributeSettingsFragment.SettingsActivitySubcomponent.Factory get(
          ) {
        return new SettingsActivitySubcomponentFactory();
      }
    };
    this.applicationProvider = InstanceFactory.create(applicationParam);
    this.provideSettingsManagerProvider = DoubleCheck.provider(AppModule_ProvideSettingsManagerFactory.create(appModuleParam, applicationProvider));
    this.provideControllerProvider = DoubleCheck.provider(AppModule_ProvideControllerFactory.create(appModuleParam));
    this.provideAdsManagerProvider = DoubleCheck.provider(AppModule_ProvideAdsManagerFactory.create(appModuleParam, applicationProvider));
    this.provideAuthManagerProvider = DoubleCheck.provider(AppModule_ProvideAuthManagerFactory.create(appModuleParam, applicationProvider));
    this.provideSharedPreferencesProvider = DoubleCheck.provider(AppModule_ProvideSharedPreferencesFactory.create(appModuleParam, applicationProvider));
    this.provideMoviesServiceProvider = DoubleCheck.provider(AppModule_ProvideMoviesServiceFactory.create(appModuleParam));
    this.provideServiceStatusProvider = DoubleCheck.provider(AppModule_ProvideServiceStatusFactory.create(appModuleParam, provideSettingsManagerProvider));
    this.provideDbProvider = DoubleCheck.provider(AppModule_ProvideDbFactory.create(appModuleParam, applicationProvider));
    this.provideFavMoviesDaoProvider = DoubleCheck.provider(AppModule_ProvideFavMoviesDaoFactory.create(appModuleParam, provideDbProvider));
    this.provideProgressDaoProvider = DoubleCheck.provider(AppModule_ProvideProgressDaoFactory.create(appModuleParam, provideDbProvider));
    this.provideHistoryDaoProvider = DoubleCheck.provider(AppModule_ProvideHistoryDaoFactory.create(appModuleParam, provideDbProvider));
    this.provideStreamyDaoProvider = DoubleCheck.provider(AppModule_ProvideStreamyDaoFactory.create(appModuleParam, provideDbProvider));
    this.provideMoviesServiceImdbProvider = DoubleCheck.provider(AppModule_ProvideMoviesServiceImdbFactory.create(appModuleParam));
    this.provideServiceAppProvider = DoubleCheck.provider(AppModule_ProvideServiceAppFactory.create(appModuleParam));
    this.mediaRepositoryProvider = DoubleCheck.provider(MediaRepository_Factory.create(provideFavMoviesDaoProvider, provideProgressDaoProvider, provideMoviesServiceProvider, provideMoviesServiceProvider, provideHistoryDaoProvider, provideStreamyDaoProvider, provideMoviesServiceImdbProvider, provideSettingsManagerProvider, provideServiceAppProvider));
    this.provideStateFactoryProvider = DoubleCheck.provider(AppModule_ProvideStateFactoryFactory.create(appModuleParam));
    this.provideFsmPlayerProvider = DoubleCheck.provider(AppModule_ProvideFsmPlayerFactory.create(appModuleParam, provideStateFactoryProvider));
    this.provideAdPlayingMonitorProvider = DoubleCheck.provider(AppModule_ProvideAdPlayingMonitorFactory.create(appModuleParam, provideFsmPlayerProvider));
    this.provideCuePointMonitorProvider = DoubleCheck.provider(AppModule_ProvideCuePointMonitorFactory.create(appModuleParam, provideFsmPlayerProvider));
    this.provideAdRetrieverProvider = DoubleCheck.provider(AppModule_ProvideAdRetrieverFactory.create(appModuleParam));
    this.provideCuePointsRetrieverProvider = DoubleCheck.provider(AppModule_ProvideCuePointsRetrieverFactory.create(appModuleParam));
    this.provideAdInterfaceNoPrerollProvider = DoubleCheck.provider(AppModule_ProvideAdInterfaceNoPrerollFactory.create(appModuleParam));
    this.provideComponentControllerProvider = DoubleCheck.provider(AppModule_ProvideComponentControllerFactory.create(appModuleParam));
    this.provideVpaidClientProvider = DoubleCheck.provider(AppModule_ProvideVpaidClientFactory.create(appModuleParam));
    this.provideStatusManagerProvider = DoubleCheck.provider(AppModule_ProvideStatusManagerFactory.create(appModuleParam, applicationProvider));
    this.provideTokenManagerProvider = DoubleCheck.provider(AppModule_ProvideTokenManagerFactory.create(appModuleParam, applicationProvider));
    this.providesSharedPreferencesEditorProvider = DoubleCheck.provider(AppModule_ProvidesSharedPreferencesEditorFactory.create(appModuleParam, applicationProvider));
    this.animeRepositoryProvider = DoubleCheck.provider(AnimeRepository_Factory.create(provideMoviesServiceProvider, provideFavMoviesDaoProvider, provideSettingsManagerProvider));
    this.homeViewModelProvider = HomeViewModel_Factory.create(mediaRepositoryProvider);
    this.upcomingViewModelProvider = UpcomingViewModel_Factory.create(mediaRepositoryProvider, provideServiceStatusProvider);
    this.movieDetailViewModelProvider = MovieDetailViewModel_Factory.create(mediaRepositoryProvider);
    this.serieDetailViewModelProvider = SerieDetailViewModel_Factory.create(mediaRepositoryProvider);
    this.searchViewModelProvider = SearchViewModel_Factory.create(mediaRepositoryProvider);
    this.provideServiceAuthProvider = DoubleCheck.provider(AppModule_ProvideServiceAuthFactory.create(appModuleParam, provideTokenManagerProvider));
    this.authRepositoryProvider = AuthRepository_Factory.create(provideMoviesServiceProvider, provideTokenManagerProvider, provideServiceAuthProvider, provideTokenManagerProvider);
    this.loginViewModelProvider = LoginViewModel_Factory.create(authRepositoryProvider);
    this.registerViewModelProvider = RegisterViewModel_Factory.create(authRepositoryProvider);
    this.genresViewModelProvider = GenresViewModel_Factory.create(mediaRepositoryProvider);
    this.settingsRepositoryProvider = SettingsRepository_Factory.create(provideMoviesServiceProvider, provideMoviesServiceProvider, provideServiceStatusProvider);
    this.settingsViewModelProvider = SettingsViewModel_Factory.create(settingsRepositoryProvider, provideSettingsManagerProvider);
    this.moviesListViewModelProvider = MoviesListViewModel_Factory.create(mediaRepositoryProvider);
    this.animeViewModelProvider = AnimeViewModel_Factory.create(animeRepositoryProvider);
    this.streamingDetailViewModelProvider = StreamingDetailViewModel_Factory.create(mediaRepositoryProvider);
    this.streamingGenresViewModelProvider = StreamingGenresViewModel_Factory.create(mediaRepositoryProvider);
    this.mapOfClassOfAndProviderOfViewModelProvider = MapProviderFactory.<Class<? extends ViewModel>, ViewModel>builder(13).put(HomeViewModel.class, (Provider) homeViewModelProvider).put(UpcomingViewModel.class, (Provider) upcomingViewModelProvider).put(MovieDetailViewModel.class, (Provider) movieDetailViewModelProvider).put(SerieDetailViewModel.class, (Provider) serieDetailViewModelProvider).put(SearchViewModel.class, (Provider) searchViewModelProvider).put(LoginViewModel.class, (Provider) loginViewModelProvider).put(RegisterViewModel.class, (Provider) registerViewModelProvider).put(GenresViewModel.class, (Provider) genresViewModelProvider).put(SettingsViewModel.class, (Provider) settingsViewModelProvider).put(MoviesListViewModel.class, (Provider) moviesListViewModelProvider).put(AnimeViewModel.class, (Provider) animeViewModelProvider).put(StreamingDetailViewModel.class, (Provider) streamingDetailViewModelProvider).put(StreamingGenresViewModel.class, (Provider) streamingGenresViewModelProvider).build();
    this.moviesViewModelFactoryProvider = DoubleCheck.provider(MoviesViewModelFactory_Factory.create(mapOfClassOfAndProviderOfViewModelProvider));
  }

  @Override
  public void inject(EasyPlexApp app) {
    injectEasyPlexApp(app);
  }

  @Override
  public void inject(EasyPlexMainPlayer activity) {
    injectEasyPlexMainPlayer(activity);
  }

  @CanIgnoreReturnValue
  private EasyPlexApp injectEasyPlexApp(EasyPlexApp instance) {
    EasyPlexApp_MembersInjector.injectAndroidInjector(instance, getDispatchingAndroidInjectorOfObject());
    EasyPlexApp_MembersInjector.injectSettingsManager(instance, provideSettingsManagerProvider.get());
    return instance;
  }

  @CanIgnoreReturnValue
  private SettingsRepository injectSettingsRepository(SettingsRepository instance) {
    SettingsRepository_MembersInjector.injectApiInterface(instance, provideMoviesServiceProvider.get());
    SettingsRepository_MembersInjector.injectRequestStatusApi(instance, provideServiceStatusProvider.get());
    return instance;
  }

  @CanIgnoreReturnValue
  private PlayerController injectPlayerController(PlayerController instance) {
    PlayerController_MembersInjector.injectRepository(instance, mediaRepositoryProvider.get());
    return instance;
  }

  @CanIgnoreReturnValue
  private EasyPlexMainPlayer injectEasyPlexMainPlayer(EasyPlexMainPlayer instance) {
    EasyPlexPlayerActivity_MembersInjector.injectPlayerUIController(instance, provideControllerProvider.get());
    EasyPlexPlayerActivity_MembersInjector.injectAdsManager(instance, provideAdsManagerProvider.get());
    EasyPlexPlayerActivity_MembersInjector.injectSettingsManager(instance, provideSettingsManagerProvider.get());
    EasyPlexPlayerActivity_MembersInjector.injectAuthManager(instance, provideAuthManagerProvider.get());
    EasyPlexPlayerActivity_MembersInjector.injectSharedPreferences(instance, provideSharedPreferencesProvider.get());
    EasyPlexPlayerActivity_MembersInjector.injectSettingsRepository(instance, getSettingsRepository());
    EasyPlexPlayerActivity_MembersInjector.injectAuthRepository(instance, getSettingsRepository());
    EasyPlexPlayerActivity_MembersInjector.injectMediaRepository(instance, mediaRepositoryProvider.get());
    EasyPlexMainPlayer_MembersInjector.injectFsmPlayer(instance, provideFsmPlayerProvider.get());
    EasyPlexMainPlayer_MembersInjector.injectUiController(instance, provideControllerProvider.get());
    EasyPlexMainPlayer_MembersInjector.injectAdPlayingMonitor(instance, provideAdPlayingMonitorProvider.get());
    EasyPlexMainPlayer_MembersInjector.injectCuePointMonitor(instance, provideCuePointMonitorProvider.get());
    EasyPlexMainPlayer_MembersInjector.injectAdRetriever(instance, provideAdRetrieverProvider.get());
    EasyPlexMainPlayer_MembersInjector.injectCuePointsRetriever(instance, provideCuePointsRetrieverProvider.get());
    EasyPlexMainPlayer_MembersInjector.injectAdInterface(instance, provideAdInterfaceNoPrerollProvider.get());
    EasyPlexMainPlayer_MembersInjector.injectPlayerComponentController(instance, provideComponentControllerProvider.get());
    EasyPlexMainPlayer_MembersInjector.injectVpaidClient(instance, provideVpaidClientProvider.get());
    EasyPlexMainPlayer_MembersInjector.injectPreferences(instance, provideSharedPreferencesProvider.get());
    EasyPlexMainPlayer_MembersInjector.injectAppSettingsManager(instance, provideSettingsManagerProvider.get());
    EasyPlexMainPlayer_MembersInjector.injectStatusManager(instance, provideStatusManagerProvider.get());
    EasyPlexMainPlayer_MembersInjector.injectTokenManager(instance, provideTokenManagerProvider.get());
    EasyPlexMainPlayer_MembersInjector.injectSharedPreferencesEditor(instance, providesSharedPreferencesEditorProvider.get());
    EasyPlexMainPlayer_MembersInjector.injectPlayerController(instance, getPlayerController());
    EasyPlexMainPlayer_MembersInjector.injectRepository(instance, mediaRepositoryProvider.get());
    EasyPlexMainPlayer_MembersInjector.injectAnimeRepository(instance, animeRepositoryProvider.get());
    return instance;
  }

  private static final class Builder implements AppComponent.Builder {
    private Application application;

    @Override
    public Builder application(Application application) {
      this.application = Preconditions.checkNotNull(application);
      return this;
    }

    @Override
    public AppComponent build() {
      Preconditions.checkBuilderRequirement(application, Application.class);
      return new DaggerAppComponent(new AppModule(), application);
    }
  }

  private final class BaseActivitySubcomponentFactory implements ActivityModule_ContributeMainActivity.BaseActivitySubcomponent.Factory {
    @Override
    public ActivityModule_ContributeMainActivity.BaseActivitySubcomponent create(
        BaseActivity arg0) {
      Preconditions.checkNotNull(arg0);
      return new BaseActivitySubcomponentImpl(arg0);
    }
  }

  private final class BaseActivitySubcomponentImpl implements ActivityModule_ContributeMainActivity.BaseActivitySubcomponent {
    private BaseActivitySubcomponentImpl(BaseActivity arg0) {

    }

    @Override
    public void inject(BaseActivity arg0) {
      injectBaseActivity(arg0);
    }

    @CanIgnoreReturnValue
    private BaseActivity injectBaseActivity(BaseActivity instance) {
      BaseActivity_MembersInjector.injectTokenManager(instance, DaggerAppComponent.this.provideTokenManagerProvider.get());
      BaseActivity_MembersInjector.injectSettingsManager(instance, DaggerAppComponent.this.provideSettingsManagerProvider.get());
      BaseActivity_MembersInjector.injectAdsManager(instance, DaggerAppComponent.this.provideAdsManagerProvider.get());
      BaseActivity_MembersInjector.injectStatusManager(instance, DaggerAppComponent.this.provideStatusManagerProvider.get());
      BaseActivity_MembersInjector.injectSharedPreferences(instance, DaggerAppComponent.this.provideSharedPreferencesProvider.get());
      BaseActivity_MembersInjector.injectEditor(instance, DaggerAppComponent.this.providesSharedPreferencesEditorProvider.get());
      BaseActivity_MembersInjector.injectViewModelFactory(instance, DaggerAppComponent.this.moviesViewModelFactoryProvider.get());
      return instance;
    }
  }

  private final class PaymentSubcomponentFactory implements ActivityModule_ContributePayment.PaymentSubcomponent.Factory {
    @Override
    public ActivityModule_ContributePayment.PaymentSubcomponent create(Payment arg0) {
      Preconditions.checkNotNull(arg0);
      return new PaymentSubcomponentImpl(arg0);
    }
  }

  private final class PaymentSubcomponentImpl implements ActivityModule_ContributePayment.PaymentSubcomponent {
    private PaymentSubcomponentImpl(Payment arg0) {

    }

    @Override
    public void inject(Payment arg0) {
      injectPayment(arg0);
    }

    @CanIgnoreReturnValue
    private Payment injectPayment(Payment instance) {
      Payment_MembersInjector.injectSettingsManager(instance, DaggerAppComponent.this.provideSettingsManagerProvider.get());
      Payment_MembersInjector.injectViewModelFactory(instance, DaggerAppComponent.this.moviesViewModelFactoryProvider.get());
      return instance;
    }
  }

  private final class NotificationManagerSubcomponentFactory implements ActivityModule_ContributeNotificationManager.NotificationManagerSubcomponent.Factory {
    @Override
    public ActivityModule_ContributeNotificationManager.NotificationManagerSubcomponent create(
        NotificationManager arg0) {
      Preconditions.checkNotNull(arg0);
      return new NotificationManagerSubcomponentImpl(arg0);
    }
  }

  private final class NotificationManagerSubcomponentImpl implements ActivityModule_ContributeNotificationManager.NotificationManagerSubcomponent {
    private NotificationManagerSubcomponentImpl(NotificationManager arg0) {

    }

    @Override
    public void inject(NotificationManager arg0) {
      injectNotificationManager(arg0);
    }

    @CanIgnoreReturnValue
    private NotificationManager injectNotificationManager(NotificationManager instance) {
      NotificationManager_MembersInjector.injectRepository(instance, DaggerAppComponent.this.mediaRepositoryProvider.get());
      NotificationManager_MembersInjector.injectAnimeRepository(instance, DaggerAppComponent.this.animeRepositoryProvider.get());
      return instance;
    }
  }

  private final class DownloadListSubcomponentFactory implements ActivityModule_ContributeDownloadList.DownloadListSubcomponent.Factory {
    @Override
    public ActivityModule_ContributeDownloadList.DownloadListSubcomponent create(
        DownloadList arg0) {
      Preconditions.checkNotNull(arg0);
      return new DownloadListSubcomponentImpl(arg0);
    }
  }

  private final class DownloadListSubcomponentImpl implements ActivityModule_ContributeDownloadList.DownloadListSubcomponent {
    private DownloadListSubcomponentImpl(DownloadList arg0) {

    }

    @Override
    public void inject(DownloadList arg0) {
      injectDownloadList(arg0);
    }

    @CanIgnoreReturnValue
    private DownloadList injectDownloadList(DownloadList instance) {
      DownloadList_MembersInjector.injectMediaRepository(instance, DaggerAppComponent.this.mediaRepositoryProvider.get());
      DownloadList_MembersInjector.injectViewModelFactory(instance, DaggerAppComponent.this.moviesViewModelFactoryProvider.get());
      return instance;
    }
  }

  private final class PaymentDetailsSubcomponentFactory implements ActivityModule_ContributePaymentDetails.PaymentDetailsSubcomponent.Factory {
    @Override
    public ActivityModule_ContributePaymentDetails.PaymentDetailsSubcomponent create(
        PaymentDetails arg0) {
      Preconditions.checkNotNull(arg0);
      return new PaymentDetailsSubcomponentImpl(arg0);
    }
  }

  private final class PaymentDetailsSubcomponentImpl implements ActivityModule_ContributePaymentDetails.PaymentDetailsSubcomponent {
    private PaymentDetailsSubcomponentImpl(PaymentDetails arg0) {

    }

    @Override
    public void inject(PaymentDetails arg0) {
      injectPaymentDetails(arg0);
    }

    @CanIgnoreReturnValue
    private PaymentDetails injectPaymentDetails(PaymentDetails instance) {
      PaymentDetails_MembersInjector.injectViewModelFactory(instance, DaggerAppComponent.this.moviesViewModelFactoryProvider.get());
      return instance;
    }
  }

  private final class EditProfileActivitySubcomponentFactory implements ActivityModule_ContributeEditProfileActivity.EditProfileActivitySubcomponent.Factory {
    @Override
    public ActivityModule_ContributeEditProfileActivity.EditProfileActivitySubcomponent create(
        EditProfileActivity arg0) {
      Preconditions.checkNotNull(arg0);
      return new EditProfileActivitySubcomponentImpl(arg0);
    }
  }

  private final class EditProfileActivitySubcomponentImpl implements ActivityModule_ContributeEditProfileActivity.EditProfileActivitySubcomponent {
    private EditProfileActivitySubcomponentImpl(EditProfileActivity arg0) {

    }

    @Override
    public void inject(EditProfileActivity arg0) {
      injectEditProfileActivity(arg0);
    }

    @CanIgnoreReturnValue
    private EditProfileActivity injectEditProfileActivity(EditProfileActivity instance) {
      EditProfileActivity_MembersInjector.injectViewModelFactory(instance, DaggerAppComponent.this.moviesViewModelFactoryProvider.get());
      return instance;
    }
  }

  private final class MovieDetailsActivitySubcomponentFactory implements ActivityModule_ContributeMovieDetailActivity.MovieDetailsActivitySubcomponent.Factory {
    @Override
    public ActivityModule_ContributeMovieDetailActivity.MovieDetailsActivitySubcomponent create(
        MovieDetailsActivity arg0) {
      Preconditions.checkNotNull(arg0);
      return new MovieDetailsActivitySubcomponentImpl(arg0);
    }
  }

  private final class MovieDetailsActivitySubcomponentImpl implements ActivityModule_ContributeMovieDetailActivity.MovieDetailsActivitySubcomponent {
    private MovieDetailsActivitySubcomponentImpl(MovieDetailsActivity arg0) {

    }

    @Override
    public void inject(MovieDetailsActivity arg0) {
      injectMovieDetailsActivity(arg0);
    }

    @CanIgnoreReturnValue
    private MovieDetailsActivity injectMovieDetailsActivity(MovieDetailsActivity instance) {
      MovieDetailsActivity_MembersInjector.injectViewModelFactory(instance, DaggerAppComponent.this.moviesViewModelFactoryProvider.get());
      MovieDetailsActivity_MembersInjector.injectSharedPreferences(instance, DaggerAppComponent.this.provideSharedPreferencesProvider.get());
      MovieDetailsActivity_MembersInjector.injectSettingsManager(instance, DaggerAppComponent.this.provideSettingsManagerProvider.get());
      MovieDetailsActivity_MembersInjector.injectAuthRepository(instance, DaggerAppComponent.this.getSettingsRepository());
      MovieDetailsActivity_MembersInjector.injectAuthManager(instance, DaggerAppComponent.this.provideAuthManagerProvider.get());
      MovieDetailsActivity_MembersInjector.injectTokenManager(instance, DaggerAppComponent.this.provideTokenManagerProvider.get());
      return instance;
    }
  }

  private final class SerieDetailsActivitySubcomponentFactory implements ActivityModule_ContributeSerieDetailActivity.SerieDetailsActivitySubcomponent.Factory {
    @Override
    public ActivityModule_ContributeSerieDetailActivity.SerieDetailsActivitySubcomponent create(
        SerieDetailsActivity arg0) {
      Preconditions.checkNotNull(arg0);
      return new SerieDetailsActivitySubcomponentImpl(arg0);
    }
  }

  private final class SerieDetailsActivitySubcomponentImpl implements ActivityModule_ContributeSerieDetailActivity.SerieDetailsActivitySubcomponent {
    private SerieDetailsActivitySubcomponentImpl(SerieDetailsActivity arg0) {

    }

    @Override
    public void inject(SerieDetailsActivity arg0) {
      injectSerieDetailsActivity(arg0);
    }

    @CanIgnoreReturnValue
    private SerieDetailsActivity injectSerieDetailsActivity(SerieDetailsActivity instance) {
      SerieDetailsActivity_MembersInjector.injectMediaRepository(instance, DaggerAppComponent.this.mediaRepositoryProvider.get());
      SerieDetailsActivity_MembersInjector.injectSettingsManager(instance, DaggerAppComponent.this.provideSettingsManagerProvider.get());
      SerieDetailsActivity_MembersInjector.injectTokenManager(instance, DaggerAppComponent.this.provideTokenManagerProvider.get());
      SerieDetailsActivity_MembersInjector.injectViewModelFactory(instance, DaggerAppComponent.this.moviesViewModelFactoryProvider.get());
      SerieDetailsActivity_MembersInjector.injectSharedPreferences(instance, DaggerAppComponent.this.provideSharedPreferencesProvider.get());
      SerieDetailsActivity_MembersInjector.injectAuthManager(instance, DaggerAppComponent.this.provideAuthManagerProvider.get());
      SerieDetailsActivity_MembersInjector.injectAuthRepository(instance, DaggerAppComponent.this.getSettingsRepository());
      return instance;
    }
  }

  private final class LoginActivitySubcomponentFactory implements ActivityModule_ContributeLoginActivity.LoginActivitySubcomponent.Factory {
    @Override
    public ActivityModule_ContributeLoginActivity.LoginActivitySubcomponent create(
        LoginActivity arg0) {
      Preconditions.checkNotNull(arg0);
      return new LoginActivitySubcomponentImpl(arg0);
    }
  }

  private final class LoginActivitySubcomponentImpl implements ActivityModule_ContributeLoginActivity.LoginActivitySubcomponent {
    private LoginActivitySubcomponentImpl(LoginActivity arg0) {

    }

    @Override
    public void inject(LoginActivity arg0) {
      injectLoginActivity(arg0);
    }

    @CanIgnoreReturnValue
    private LoginActivity injectLoginActivity(LoginActivity instance) {
      LoginActivity_MembersInjector.injectAndroidInjector(instance, DaggerAppComponent.this.getDispatchingAndroidInjectorOfObject());
      LoginActivity_MembersInjector.injectSharedPreferencesEditor(instance, DaggerAppComponent.this.providesSharedPreferencesEditorProvider.get());
      LoginActivity_MembersInjector.injectTokenManager(instance, DaggerAppComponent.this.provideTokenManagerProvider.get());
      LoginActivity_MembersInjector.injectViewModelFactory(instance, DaggerAppComponent.this.moviesViewModelFactoryProvider.get());
      return instance;
    }
  }

  private final class RegisterActivitySubcomponentFactory implements ActivityModule_ContributeRegisterActivity.RegisterActivitySubcomponent.Factory {
    @Override
    public ActivityModule_ContributeRegisterActivity.RegisterActivitySubcomponent create(
        RegisterActivity arg0) {
      Preconditions.checkNotNull(arg0);
      return new RegisterActivitySubcomponentImpl(arg0);
    }
  }

  private final class RegisterActivitySubcomponentImpl implements ActivityModule_ContributeRegisterActivity.RegisterActivitySubcomponent {
    private RegisterActivitySubcomponentImpl(RegisterActivity arg0) {

    }

    @Override
    public void inject(RegisterActivity arg0) {
      injectRegisterActivity(arg0);
    }

    @CanIgnoreReturnValue
    private RegisterActivity injectRegisterActivity(RegisterActivity instance) {
      RegisterActivity_MembersInjector.injectSharedPreferencesEditor(instance, DaggerAppComponent.this.providesSharedPreferencesEditorProvider.get());
      RegisterActivity_MembersInjector.injectTokenManager(instance, DaggerAppComponent.this.provideTokenManagerProvider.get());
      RegisterActivity_MembersInjector.injectAndroidInjector(instance, DaggerAppComponent.this.getDispatchingAndroidInjectorOfObject());
      RegisterActivity_MembersInjector.injectViewModelFactory(instance, DaggerAppComponent.this.moviesViewModelFactoryProvider.get());
      return instance;
    }
  }

  private final class TrailerPreviewActivitySubcomponentFactory implements ActivityModule_ContributeTrailerPreviewActivity.TrailerPreviewActivitySubcomponent.Factory {
    @Override
    public ActivityModule_ContributeTrailerPreviewActivity.TrailerPreviewActivitySubcomponent create(
        TrailerPreviewActivity arg0) {
      Preconditions.checkNotNull(arg0);
      return new TrailerPreviewActivitySubcomponentImpl(arg0);
    }
  }

  private final class TrailerPreviewActivitySubcomponentImpl implements ActivityModule_ContributeTrailerPreviewActivity.TrailerPreviewActivitySubcomponent {
    private TrailerPreviewActivitySubcomponentImpl(TrailerPreviewActivity arg0) {

    }

    @Override
    public void inject(TrailerPreviewActivity arg0) {
      injectTrailerPreviewActivity(arg0);
    }

    @CanIgnoreReturnValue
    private TrailerPreviewActivity injectTrailerPreviewActivity(TrailerPreviewActivity instance) {
      TrailerPreviewActivity_MembersInjector.injectAndroidInjector(instance, DaggerAppComponent.this.getDispatchingAndroidInjectorOfObject());
      TrailerPreviewActivity_MembersInjector.injectViewModelFactory(instance, DaggerAppComponent.this.moviesViewModelFactoryProvider.get());
      return instance;
    }
  }

  private final class UpcomingTitlesActivitySubcomponentFactory implements ActivityModule_ContributeUpcomingTitlesActivity.UpcomingTitlesActivitySubcomponent.Factory {
    @Override
    public ActivityModule_ContributeUpcomingTitlesActivity.UpcomingTitlesActivitySubcomponent create(
        UpcomingTitlesActivity arg0) {
      Preconditions.checkNotNull(arg0);
      return new UpcomingTitlesActivitySubcomponentImpl(arg0);
    }
  }

  private final class UpcomingTitlesActivitySubcomponentImpl implements ActivityModule_ContributeUpcomingTitlesActivity.UpcomingTitlesActivitySubcomponent {
    private UpcomingTitlesActivitySubcomponentImpl(UpcomingTitlesActivity arg0) {

    }

    @Override
    public void inject(UpcomingTitlesActivity arg0) {
      injectUpcomingTitlesActivity(arg0);
    }

    @CanIgnoreReturnValue
    private UpcomingTitlesActivity injectUpcomingTitlesActivity(UpcomingTitlesActivity instance) {
      UpcomingTitlesActivity_MembersInjector.injectAndroidInjector(instance, DaggerAppComponent.this.getDispatchingAndroidInjectorOfObject());
      UpcomingTitlesActivity_MembersInjector.injectViewModelFactory(instance, DaggerAppComponent.this.moviesViewModelFactoryProvider.get());
      return instance;
    }
  }

  private final class AnimeDetailsActivitySubcomponentFactory implements ActivityModule_ContributeAnimeDetailsActivity.AnimeDetailsActivitySubcomponent.Factory {
    @Override
    public ActivityModule_ContributeAnimeDetailsActivity.AnimeDetailsActivitySubcomponent create(
        AnimeDetailsActivity arg0) {
      Preconditions.checkNotNull(arg0);
      return new AnimeDetailsActivitySubcomponentImpl(arg0);
    }
  }

  private final class AnimeDetailsActivitySubcomponentImpl implements ActivityModule_ContributeAnimeDetailsActivity.AnimeDetailsActivitySubcomponent {
    private AnimeDetailsActivitySubcomponentImpl(AnimeDetailsActivity arg0) {

    }

    @Override
    public void inject(AnimeDetailsActivity arg0) {
      injectAnimeDetailsActivity(arg0);
    }

    @CanIgnoreReturnValue
    private AnimeDetailsActivity injectAnimeDetailsActivity(AnimeDetailsActivity instance) {
      AnimeDetailsActivity_MembersInjector.injectViewModelFactory(instance, DaggerAppComponent.this.moviesViewModelFactoryProvider.get());
      AnimeDetailsActivity_MembersInjector.injectSharedPreferences(instance, DaggerAppComponent.this.provideSharedPreferencesProvider.get());
      AnimeDetailsActivity_MembersInjector.injectTokenManager(instance, DaggerAppComponent.this.provideTokenManagerProvider.get());
      AnimeDetailsActivity_MembersInjector.injectSettingsManager(instance, DaggerAppComponent.this.provideSettingsManagerProvider.get());
      AnimeDetailsActivity_MembersInjector.injectAuthManager(instance, DaggerAppComponent.this.provideAuthManagerProvider.get());
      AnimeDetailsActivity_MembersInjector.injectMediaRepository(instance, DaggerAppComponent.this.mediaRepositoryProvider.get());
      return instance;
    }
  }

  private final class EasyPlexMainPlayerSubcomponentFactory implements ActivityModule_ContributeDoubleViewTubiPlayerActivity.EasyPlexMainPlayerSubcomponent.Factory {
    @Override
    public ActivityModule_ContributeDoubleViewTubiPlayerActivity.EasyPlexMainPlayerSubcomponent create(
        EasyPlexMainPlayer arg0) {
      Preconditions.checkNotNull(arg0);
      return new EasyPlexMainPlayerSubcomponentImpl(arg0);
    }
  }

  private final class EasyPlexMainPlayerSubcomponentImpl implements ActivityModule_ContributeDoubleViewTubiPlayerActivity.EasyPlexMainPlayerSubcomponent {
    private EasyPlexMainPlayerSubcomponentImpl(EasyPlexMainPlayer arg0) {

    }

    @Override
    public void inject(EasyPlexMainPlayer arg0) {
      injectEasyPlexMainPlayer(arg0);
    }

    @CanIgnoreReturnValue
    private EasyPlexMainPlayer injectEasyPlexMainPlayer(EasyPlexMainPlayer instance) {
      EasyPlexPlayerActivity_MembersInjector.injectPlayerUIController(instance, DaggerAppComponent.this.provideControllerProvider.get());
      EasyPlexPlayerActivity_MembersInjector.injectAdsManager(instance, DaggerAppComponent.this.provideAdsManagerProvider.get());
      EasyPlexPlayerActivity_MembersInjector.injectSettingsManager(instance, DaggerAppComponent.this.provideSettingsManagerProvider.get());
      EasyPlexPlayerActivity_MembersInjector.injectAuthManager(instance, DaggerAppComponent.this.provideAuthManagerProvider.get());
      EasyPlexPlayerActivity_MembersInjector.injectSharedPreferences(instance, DaggerAppComponent.this.provideSharedPreferencesProvider.get());
      EasyPlexPlayerActivity_MembersInjector.injectSettingsRepository(instance, DaggerAppComponent.this.getSettingsRepository());
      EasyPlexPlayerActivity_MembersInjector.injectAuthRepository(instance, DaggerAppComponent.this.getSettingsRepository());
      EasyPlexPlayerActivity_MembersInjector.injectMediaRepository(instance, DaggerAppComponent.this.mediaRepositoryProvider.get());
      EasyPlexMainPlayer_MembersInjector.injectFsmPlayer(instance, DaggerAppComponent.this.provideFsmPlayerProvider.get());
      EasyPlexMainPlayer_MembersInjector.injectUiController(instance, DaggerAppComponent.this.provideControllerProvider.get());
      EasyPlexMainPlayer_MembersInjector.injectAdPlayingMonitor(instance, DaggerAppComponent.this.provideAdPlayingMonitorProvider.get());
      EasyPlexMainPlayer_MembersInjector.injectCuePointMonitor(instance, DaggerAppComponent.this.provideCuePointMonitorProvider.get());
      EasyPlexMainPlayer_MembersInjector.injectAdRetriever(instance, DaggerAppComponent.this.provideAdRetrieverProvider.get());
      EasyPlexMainPlayer_MembersInjector.injectCuePointsRetriever(instance, DaggerAppComponent.this.provideCuePointsRetrieverProvider.get());
      EasyPlexMainPlayer_MembersInjector.injectAdInterface(instance, DaggerAppComponent.this.provideAdInterfaceNoPrerollProvider.get());
      EasyPlexMainPlayer_MembersInjector.injectPlayerComponentController(instance, DaggerAppComponent.this.provideComponentControllerProvider.get());
      EasyPlexMainPlayer_MembersInjector.injectVpaidClient(instance, DaggerAppComponent.this.provideVpaidClientProvider.get());
      EasyPlexMainPlayer_MembersInjector.injectPreferences(instance, DaggerAppComponent.this.provideSharedPreferencesProvider.get());
      EasyPlexMainPlayer_MembersInjector.injectAppSettingsManager(instance, DaggerAppComponent.this.provideSettingsManagerProvider.get());
      EasyPlexMainPlayer_MembersInjector.injectStatusManager(instance, DaggerAppComponent.this.provideStatusManagerProvider.get());
      EasyPlexMainPlayer_MembersInjector.injectTokenManager(instance, DaggerAppComponent.this.provideTokenManagerProvider.get());
      EasyPlexMainPlayer_MembersInjector.injectSharedPreferencesEditor(instance, DaggerAppComponent.this.providesSharedPreferencesEditorProvider.get());
      EasyPlexMainPlayer_MembersInjector.injectPlayerController(instance, DaggerAppComponent.this.getPlayerController());
      EasyPlexMainPlayer_MembersInjector.injectRepository(instance, DaggerAppComponent.this.mediaRepositoryProvider.get());
      EasyPlexMainPlayer_MembersInjector.injectAnimeRepository(instance, DaggerAppComponent.this.animeRepositoryProvider.get());
      return instance;
    }
  }

  private final class SplashActivitySubcomponentFactory implements ActivityModule_ContributeSplashActivity.SplashActivitySubcomponent.Factory {
    @Override
    public ActivityModule_ContributeSplashActivity.SplashActivitySubcomponent create(
        SplashActivity arg0) {
      Preconditions.checkNotNull(arg0);
      return new SplashActivitySubcomponentImpl(arg0);
    }
  }

  private final class SplashActivitySubcomponentImpl implements ActivityModule_ContributeSplashActivity.SplashActivitySubcomponent {
    private SplashActivitySubcomponentImpl(SplashActivity arg0) {

    }

    @Override
    public void inject(SplashActivity arg0) {
      injectSplashActivity(arg0);
    }

    @CanIgnoreReturnValue
    private SplashActivity injectSplashActivity(SplashActivity instance) {
      SplashActivity_MembersInjector.injectSettingsManager(instance, DaggerAppComponent.this.provideSettingsManagerProvider.get());
      SplashActivity_MembersInjector.injectAdsManager(instance, DaggerAppComponent.this.provideAdsManagerProvider.get());
      SplashActivity_MembersInjector.injectStatusManager(instance, DaggerAppComponent.this.provideStatusManagerProvider.get());
      SplashActivity_MembersInjector.injectViewModelFactory(instance, DaggerAppComponent.this.moviesViewModelFactoryProvider.get());
      return instance;
    }
  }

  private final class TrackSelectionDialogSubcomponentFactory implements FragmentBuildersModule_ContributeTrackSelectionDialog.TrackSelectionDialogSubcomponent.Factory {
    @Override
    public FragmentBuildersModule_ContributeTrackSelectionDialog.TrackSelectionDialogSubcomponent create(
        TrackSelectionDialog arg0) {
      Preconditions.checkNotNull(arg0);
      return new TrackSelectionDialogSubcomponentImpl(arg0);
    }
  }

  private final class TrackSelectionDialogSubcomponentImpl implements FragmentBuildersModule_ContributeTrackSelectionDialog.TrackSelectionDialogSubcomponent {
    private TrackSelectionDialogSubcomponentImpl(TrackSelectionDialog arg0) {

    }

    @Override
    public void inject(TrackSelectionDialog arg0) {
    }
  }

  private final class HomeFragmentSubcomponentFactory implements FragmentBuildersModule_ContributeHomeFragment.HomeFragmentSubcomponent.Factory {
    @Override
    public FragmentBuildersModule_ContributeHomeFragment.HomeFragmentSubcomponent create(
        HomeFragment arg0) {
      Preconditions.checkNotNull(arg0);
      return new HomeFragmentSubcomponentImpl(arg0);
    }
  }

  private final class HomeFragmentSubcomponentImpl implements FragmentBuildersModule_ContributeHomeFragment.HomeFragmentSubcomponent {
    private HomeFragmentSubcomponentImpl(HomeFragment arg0) {

    }

    @Override
    public void inject(HomeFragment arg0) {
      injectHomeFragment(arg0);
    }

    @CanIgnoreReturnValue
    private HomeFragment injectHomeFragment(HomeFragment instance) {
      HomeFragment_MembersInjector.injectViewModelFactory(instance, DaggerAppComponent.this.moviesViewModelFactoryProvider.get());
      HomeFragment_MembersInjector.injectPreferences(instance, DaggerAppComponent.this.provideSharedPreferencesProvider.get());
      HomeFragment_MembersInjector.injectMediaRepository(instance, DaggerAppComponent.this.mediaRepositoryProvider.get());
      HomeFragment_MembersInjector.injectAuthRepository(instance, DaggerAppComponent.this.getSettingsRepository());
      HomeFragment_MembersInjector.injectSettingsManager(instance, DaggerAppComponent.this.provideSettingsManagerProvider.get());
      HomeFragment_MembersInjector.injectTokenManager(instance, DaggerAppComponent.this.provideTokenManagerProvider.get());
      HomeFragment_MembersInjector.injectAdsManager(instance, DaggerAppComponent.this.provideAdsManagerProvider.get());
      HomeFragment_MembersInjector.injectAuthManager(instance, DaggerAppComponent.this.provideAuthManagerProvider.get());
      HomeFragment_MembersInjector.injectStatusManager(instance, DaggerAppComponent.this.provideStatusManagerProvider.get());
      HomeFragment_MembersInjector.injectEditor(instance, DaggerAppComponent.this.providesSharedPreferencesEditorProvider.get());
      HomeFragment_MembersInjector.injectSharedPreferences(instance, DaggerAppComponent.this.provideSharedPreferencesProvider.get());
      return instance;
    }
  }

  private final class UpComingFragmentSubcomponentFactory implements FragmentBuildersModule_ContributeUpcomingFragment.UpComingFragmentSubcomponent.Factory {
    @Override
    public FragmentBuildersModule_ContributeUpcomingFragment.UpComingFragmentSubcomponent create(
        UpComingFragment arg0) {
      Preconditions.checkNotNull(arg0);
      return new UpComingFragmentSubcomponentImpl(arg0);
    }
  }

  private final class UpComingFragmentSubcomponentImpl implements FragmentBuildersModule_ContributeUpcomingFragment.UpComingFragmentSubcomponent {
    private UpComingFragmentSubcomponentImpl(UpComingFragment arg0) {

    }

    @Override
    public void inject(UpComingFragment arg0) {
      injectUpComingFragment(arg0);
    }

    @CanIgnoreReturnValue
    private UpComingFragment injectUpComingFragment(UpComingFragment instance) {
      UpComingFragment_MembersInjector.injectViewModelFactory(instance, DaggerAppComponent.this.moviesViewModelFactoryProvider.get());
      return instance;
    }
  }

  private final class DiscoverFragmentSubcomponentFactory implements FragmentBuildersModule_ContributeDiscoverFragment.DiscoverFragmentSubcomponent.Factory {
    @Override
    public FragmentBuildersModule_ContributeDiscoverFragment.DiscoverFragmentSubcomponent create(
        DiscoverFragment arg0) {
      Preconditions.checkNotNull(arg0);
      return new DiscoverFragmentSubcomponentImpl(arg0);
    }
  }

  private final class DiscoverFragmentSubcomponentImpl implements FragmentBuildersModule_ContributeDiscoverFragment.DiscoverFragmentSubcomponent {
    private DiscoverFragmentSubcomponentImpl(DiscoverFragment arg0) {

    }

    @Override
    public void inject(DiscoverFragment arg0) {
      injectDiscoverFragment(arg0);
    }

    @CanIgnoreReturnValue
    private DiscoverFragment injectDiscoverFragment(DiscoverFragment instance) {
      DiscoverFragment_MembersInjector.injectAuthRepository(instance, DaggerAppComponent.this.getSettingsRepository());
      DiscoverFragment_MembersInjector.injectTokenManager(instance, DaggerAppComponent.this.provideTokenManagerProvider.get());
      DiscoverFragment_MembersInjector.injectPreferences(instance, DaggerAppComponent.this.provideSharedPreferencesProvider.get());
      DiscoverFragment_MembersInjector.injectAuthManager(instance, DaggerAppComponent.this.provideAuthManagerProvider.get());
      DiscoverFragment_MembersInjector.injectSettingsManager(instance, DaggerAppComponent.this.provideSettingsManagerProvider.get());
      DiscoverFragment_MembersInjector.injectViewModelFactory(instance, DaggerAppComponent.this.moviesViewModelFactoryProvider.get());
      return instance;
    }
  }

  private final class MoviesFragmentSubcomponentFactory implements FragmentBuildersModule_ContributeMoviesFragment.MoviesFragmentSubcomponent.Factory {
    @Override
    public FragmentBuildersModule_ContributeMoviesFragment.MoviesFragmentSubcomponent create(
        MoviesFragment arg0) {
      Preconditions.checkNotNull(arg0);
      return new MoviesFragmentSubcomponentImpl(arg0);
    }
  }

  private final class MoviesFragmentSubcomponentImpl implements FragmentBuildersModule_ContributeMoviesFragment.MoviesFragmentSubcomponent {
    private MoviesFragmentSubcomponentImpl(MoviesFragment arg0) {

    }

    @Override
    public void inject(MoviesFragment arg0) {
      injectMoviesFragment(arg0);
    }

    @CanIgnoreReturnValue
    private MoviesFragment injectMoviesFragment(MoviesFragment instance) {
      MoviesFragment_MembersInjector.injectViewModelFactory(instance, DaggerAppComponent.this.moviesViewModelFactoryProvider.get());
      return instance;
    }
  }

  private final class SeriesFragmentSubcomponentFactory implements FragmentBuildersModule_ContributeSeriesFragment.SeriesFragmentSubcomponent.Factory {
    @Override
    public FragmentBuildersModule_ContributeSeriesFragment.SeriesFragmentSubcomponent create(
        SeriesFragment arg0) {
      Preconditions.checkNotNull(arg0);
      return new SeriesFragmentSubcomponentImpl(arg0);
    }
  }

  private final class SeriesFragmentSubcomponentImpl implements FragmentBuildersModule_ContributeSeriesFragment.SeriesFragmentSubcomponent {
    private SeriesFragmentSubcomponentImpl(SeriesFragment arg0) {

    }

    @Override
    public void inject(SeriesFragment arg0) {
      injectSeriesFragment(arg0);
    }

    @CanIgnoreReturnValue
    private SeriesFragment injectSeriesFragment(SeriesFragment instance) {
      SeriesFragment_MembersInjector.injectViewModelFactory(instance, DaggerAppComponent.this.moviesViewModelFactoryProvider.get());
      return instance;
    }
  }

  private final class LibraryFragmentSubcomponentFactory implements FragmentBuildersModule_ContributeLibraryFragment.LibraryFragmentSubcomponent.Factory {
    @Override
    public FragmentBuildersModule_ContributeLibraryFragment.LibraryFragmentSubcomponent create(
        LibraryFragment arg0) {
      Preconditions.checkNotNull(arg0);
      return new LibraryFragmentSubcomponentImpl(arg0);
    }
  }

  private final class LibraryFragmentSubcomponentImpl implements FragmentBuildersModule_ContributeLibraryFragment.LibraryFragmentSubcomponent {
    private LibraryFragmentSubcomponentImpl(LibraryFragment arg0) {

    }

    @Override
    public void inject(LibraryFragment arg0) {
      injectLibraryFragment(arg0);
    }

    @CanIgnoreReturnValue
    private LibraryFragment injectLibraryFragment(LibraryFragment instance) {
      LibraryFragment_MembersInjector.injectAuthRepository(instance, DaggerAppComponent.this.getSettingsRepository());
      LibraryFragment_MembersInjector.injectSettingsManager(instance, DaggerAppComponent.this.provideSettingsManagerProvider.get());
      return instance;
    }
  }

  private final class MyListFragmentSubcomponentFactory implements FragmentBuildersModule_ContributeMyListMoviesFragment.MyListFragmentSubcomponent.Factory {
    @Override
    public FragmentBuildersModule_ContributeMyListMoviesFragment.MyListFragmentSubcomponent create(
        MyListFragment arg0) {
      Preconditions.checkNotNull(arg0);
      return new MyListFragmentSubcomponentImpl(arg0);
    }
  }

  private final class MyListFragmentSubcomponentImpl implements FragmentBuildersModule_ContributeMyListMoviesFragment.MyListFragmentSubcomponent {
    private MyListFragmentSubcomponentImpl(MyListFragment arg0) {

    }

    @Override
    public void inject(MyListFragment arg0) {
      injectMyListFragment(arg0);
    }

    @CanIgnoreReturnValue
    private MyListFragment injectMyListFragment(MyListFragment instance) {
      MyListFragment_MembersInjector.injectViewModelFactory(instance, DaggerAppComponent.this.moviesViewModelFactoryProvider.get());
      return instance;
    }
  }

  private final class AnimesFragmentSubcomponentFactory implements FragmentBuildersModule_ContributeAnimesFragment.AnimesFragmentSubcomponent.Factory {
    @Override
    public FragmentBuildersModule_ContributeAnimesFragment.AnimesFragmentSubcomponent create(
        AnimesFragment arg0) {
      Preconditions.checkNotNull(arg0);
      return new AnimesFragmentSubcomponentImpl(arg0);
    }
  }

  private final class AnimesFragmentSubcomponentImpl implements FragmentBuildersModule_ContributeAnimesFragment.AnimesFragmentSubcomponent {
    private AnimesFragmentSubcomponentImpl(AnimesFragment arg0) {

    }

    @Override
    public void inject(AnimesFragment arg0) {
      injectAnimesFragment(arg0);
    }

    @CanIgnoreReturnValue
    private AnimesFragment injectAnimesFragment(AnimesFragment instance) {
      AnimesFragment_MembersInjector.injectViewModelFactory(instance, DaggerAppComponent.this.moviesViewModelFactoryProvider.get());
      return instance;
    }
  }

  private final class StreamingFragmentSubcomponentFactory implements FragmentBuildersModule_ContributeLiveFragment.StreamingFragmentSubcomponent.Factory {
    @Override
    public FragmentBuildersModule_ContributeLiveFragment.StreamingFragmentSubcomponent create(
        StreamingFragment arg0) {
      Preconditions.checkNotNull(arg0);
      return new StreamingFragmentSubcomponentImpl(arg0);
    }
  }

  private final class StreamingFragmentSubcomponentImpl implements FragmentBuildersModule_ContributeLiveFragment.StreamingFragmentSubcomponent {
    private StreamingFragmentSubcomponentImpl(StreamingFragment arg0) {

    }

    @Override
    public void inject(StreamingFragment arg0) {
      injectStreamingFragment(arg0);
    }

    @CanIgnoreReturnValue
    private StreamingFragment injectStreamingFragment(StreamingFragment instance) {
      StreamingFragment_MembersInjector.injectViewModelFactory(instance, DaggerAppComponent.this.moviesViewModelFactoryProvider.get());
      StreamingFragment_MembersInjector.injectSettingsManager(instance, DaggerAppComponent.this.provideSettingsManagerProvider.get());
      StreamingFragment_MembersInjector.injectPreferences(instance, DaggerAppComponent.this.provideSharedPreferencesProvider.get());
      StreamingFragment_MembersInjector.injectAuthRepository(instance, DaggerAppComponent.this.getSettingsRepository());
      StreamingFragment_MembersInjector.injectMediaRepository(instance, DaggerAppComponent.this.mediaRepositoryProvider.get());
      StreamingFragment_MembersInjector.injectAuthManager(instance, DaggerAppComponent.this.provideAuthManagerProvider.get());
      StreamingFragment_MembersInjector.injectTokenManager(instance, DaggerAppComponent.this.provideTokenManagerProvider.get());
      return instance;
    }
  }

  private final class SettingsActivitySubcomponentFactory implements FragmentBuildersModule_ContributeSettingsFragment.SettingsActivitySubcomponent.Factory {
    @Override
    public FragmentBuildersModule_ContributeSettingsFragment.SettingsActivitySubcomponent create(
        SettingsActivity arg0) {
      Preconditions.checkNotNull(arg0);
      return new SettingsActivitySubcomponentImpl(arg0);
    }
  }

  private final class SettingsActivitySubcomponentImpl implements FragmentBuildersModule_ContributeSettingsFragment.SettingsActivitySubcomponent {
    private SettingsActivitySubcomponentImpl(SettingsActivity arg0) {

    }

    @Override
    public void inject(SettingsActivity arg0) {
      injectSettingsActivity(arg0);
    }

    @CanIgnoreReturnValue
    private SettingsActivity injectSettingsActivity(SettingsActivity instance) {
      SettingsActivity_MembersInjector.injectViewModelFactory(instance, DaggerAppComponent.this.moviesViewModelFactoryProvider.get());
      SettingsActivity_MembersInjector.injectSharedPreferencesEditor(instance, DaggerAppComponent.this.providesSharedPreferencesEditorProvider.get());
      SettingsActivity_MembersInjector.injectSharedPreferences(instance, DaggerAppComponent.this.provideSharedPreferencesProvider.get());
      SettingsActivity_MembersInjector.injectTokenManager(instance, DaggerAppComponent.this.provideTokenManagerProvider.get());
      SettingsActivity_MembersInjector.injectSettingsManager(instance, DaggerAppComponent.this.provideSettingsManagerProvider.get());
      SettingsActivity_MembersInjector.injectAdsManager(instance, DaggerAppComponent.this.provideAdsManagerProvider.get());
      SettingsActivity_MembersInjector.injectAuthManager(instance, DaggerAppComponent.this.provideAuthManagerProvider.get());
      return instance;
    }
  }
}
