// Generated by Dagger (https://dagger.dev).
package com.streamsaw.ui.viewmodels;

import com.streamsaw.data.remote.ApiInterface;
import com.streamsaw.data.repository.MediaRepository;
import dagger.internal.Factory;
import javax.inject.Provider;

@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class UpcomingViewModel_Factory implements Factory<UpcomingViewModel> {
  private final Provider<MediaRepository> mediaRepositoryProvider;

  private final Provider<ApiInterface> requestStatusApiProvider;

  public UpcomingViewModel_Factory(Provider<MediaRepository> mediaRepositoryProvider,
      Provider<ApiInterface> requestStatusApiProvider) {
    this.mediaRepositoryProvider = mediaRepositoryProvider;
    this.requestStatusApiProvider = requestStatusApiProvider;
  }

  @Override
  public UpcomingViewModel get() {
    UpcomingViewModel instance = newInstance(mediaRepositoryProvider.get());
    UpcomingViewModel_MembersInjector.injectRequestStatusApi(instance, requestStatusApiProvider.get());
    return instance;
  }

  public static UpcomingViewModel_Factory create(Provider<MediaRepository> mediaRepositoryProvider,
      Provider<ApiInterface> requestStatusApiProvider) {
    return new UpcomingViewModel_Factory(mediaRepositoryProvider, requestStatusApiProvider);
  }

  public static UpcomingViewModel newInstance(MediaRepository mediaRepository) {
    return new UpcomingViewModel(mediaRepository);
  }
}
