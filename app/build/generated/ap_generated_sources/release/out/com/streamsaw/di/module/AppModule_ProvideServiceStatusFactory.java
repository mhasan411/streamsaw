// Generated by Dagger (https://dagger.dev).
package com.streamsaw.di.module;

import com.streamsaw.data.remote.ApiInterface;
import com.streamsaw.ui.manager.SettingsManager;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;

@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class AppModule_ProvideServiceStatusFactory implements Factory<ApiInterface> {
  private final AppModule module;

  private final Provider<SettingsManager> tokenManagerProvider;

  public AppModule_ProvideServiceStatusFactory(AppModule module,
      Provider<SettingsManager> tokenManagerProvider) {
    this.module = module;
    this.tokenManagerProvider = tokenManagerProvider;
  }

  @Override
  public ApiInterface get() {
    return provideServiceStatus(module, tokenManagerProvider.get());
  }

  public static AppModule_ProvideServiceStatusFactory create(AppModule module,
      Provider<SettingsManager> tokenManagerProvider) {
    return new AppModule_ProvideServiceStatusFactory(module, tokenManagerProvider);
  }

  public static ApiInterface provideServiceStatus(AppModule instance,
      SettingsManager tokenManager) {
    return Preconditions.checkNotNull(instance.provideServiceStatus(tokenManager), "Cannot return null from a non-@Nullable @Provides method");
  }
}
