// Generated by Dagger (https://dagger.dev).
package com.streamsaw.ui.home;

import android.content.SharedPreferences;
import androidx.lifecycle.ViewModelProvider;
import com.streamsaw.data.repository.MediaRepository;
import com.streamsaw.data.repository.SettingsRepository;
import com.streamsaw.ui.manager.AdsManager;
import com.streamsaw.ui.manager.AuthManager;
import com.streamsaw.ui.manager.SettingsManager;
import com.streamsaw.ui.manager.StatusManager;
import com.streamsaw.ui.manager.TokenManager;
import dagger.MembersInjector;
import dagger.internal.InjectedFieldSignature;
import javax.inject.Provider;

@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class HomeFragment_MembersInjector implements MembersInjector<HomeFragment> {
  private final Provider<ViewModelProvider.Factory> viewModelFactoryProvider;

  private final Provider<SharedPreferences> preferencesProvider;

  private final Provider<MediaRepository> mediaRepositoryProvider;

  private final Provider<SettingsRepository> authRepositoryProvider;

  private final Provider<SettingsManager> settingsManagerProvider;

  private final Provider<TokenManager> tokenManagerProvider;

  private final Provider<AdsManager> adsManagerProvider;

  private final Provider<AuthManager> authManagerProvider;

  private final Provider<StatusManager> statusManagerProvider;

  private final Provider<SharedPreferences.Editor> editorProvider;

  private final Provider<SharedPreferences> sharedPreferencesProvider;

  public HomeFragment_MembersInjector(Provider<ViewModelProvider.Factory> viewModelFactoryProvider,
      Provider<SharedPreferences> preferencesProvider,
      Provider<MediaRepository> mediaRepositoryProvider,
      Provider<SettingsRepository> authRepositoryProvider,
      Provider<SettingsManager> settingsManagerProvider,
      Provider<TokenManager> tokenManagerProvider, Provider<AdsManager> adsManagerProvider,
      Provider<AuthManager> authManagerProvider, Provider<StatusManager> statusManagerProvider,
      Provider<SharedPreferences.Editor> editorProvider,
      Provider<SharedPreferences> sharedPreferencesProvider) {
    this.viewModelFactoryProvider = viewModelFactoryProvider;
    this.preferencesProvider = preferencesProvider;
    this.mediaRepositoryProvider = mediaRepositoryProvider;
    this.authRepositoryProvider = authRepositoryProvider;
    this.settingsManagerProvider = settingsManagerProvider;
    this.tokenManagerProvider = tokenManagerProvider;
    this.adsManagerProvider = adsManagerProvider;
    this.authManagerProvider = authManagerProvider;
    this.statusManagerProvider = statusManagerProvider;
    this.editorProvider = editorProvider;
    this.sharedPreferencesProvider = sharedPreferencesProvider;
  }

  public static MembersInjector<HomeFragment> create(
      Provider<ViewModelProvider.Factory> viewModelFactoryProvider,
      Provider<SharedPreferences> preferencesProvider,
      Provider<MediaRepository> mediaRepositoryProvider,
      Provider<SettingsRepository> authRepositoryProvider,
      Provider<SettingsManager> settingsManagerProvider,
      Provider<TokenManager> tokenManagerProvider, Provider<AdsManager> adsManagerProvider,
      Provider<AuthManager> authManagerProvider, Provider<StatusManager> statusManagerProvider,
      Provider<SharedPreferences.Editor> editorProvider,
      Provider<SharedPreferences> sharedPreferencesProvider) {
    return new HomeFragment_MembersInjector(viewModelFactoryProvider, preferencesProvider, mediaRepositoryProvider, authRepositoryProvider, settingsManagerProvider, tokenManagerProvider, adsManagerProvider, authManagerProvider, statusManagerProvider, editorProvider, sharedPreferencesProvider);
  }

  @Override
  public void injectMembers(HomeFragment instance) {
    injectViewModelFactory(instance, viewModelFactoryProvider.get());
    injectPreferences(instance, preferencesProvider.get());
    injectMediaRepository(instance, mediaRepositoryProvider.get());
    injectAuthRepository(instance, authRepositoryProvider.get());
    injectSettingsManager(instance, settingsManagerProvider.get());
    injectTokenManager(instance, tokenManagerProvider.get());
    injectAdsManager(instance, adsManagerProvider.get());
    injectAuthManager(instance, authManagerProvider.get());
    injectStatusManager(instance, statusManagerProvider.get());
    injectEditor(instance, editorProvider.get());
    injectSharedPreferences(instance, sharedPreferencesProvider.get());
  }

  @InjectedFieldSignature("com.streamsaw.ui.home.HomeFragment.viewModelFactory")
  public static void injectViewModelFactory(HomeFragment instance,
      ViewModelProvider.Factory viewModelFactory) {
    instance.viewModelFactory = viewModelFactory;
  }

  @InjectedFieldSignature("com.streamsaw.ui.home.HomeFragment.preferences")
  public static void injectPreferences(HomeFragment instance, SharedPreferences preferences) {
    instance.preferences = preferences;
  }

  @InjectedFieldSignature("com.streamsaw.ui.home.HomeFragment.mediaRepository")
  public static void injectMediaRepository(HomeFragment instance, MediaRepository mediaRepository) {
    instance.mediaRepository = mediaRepository;
  }

  @InjectedFieldSignature("com.streamsaw.ui.home.HomeFragment.authRepository")
  public static void injectAuthRepository(HomeFragment instance,
      SettingsRepository authRepository) {
    instance.authRepository = authRepository;
  }

  @InjectedFieldSignature("com.streamsaw.ui.home.HomeFragment.settingsManager")
  public static void injectSettingsManager(HomeFragment instance, SettingsManager settingsManager) {
    instance.settingsManager = settingsManager;
  }

  @InjectedFieldSignature("com.streamsaw.ui.home.HomeFragment.tokenManager")
  public static void injectTokenManager(HomeFragment instance, TokenManager tokenManager) {
    instance.tokenManager = tokenManager;
  }

  @InjectedFieldSignature("com.streamsaw.ui.home.HomeFragment.adsManager")
  public static void injectAdsManager(HomeFragment instance, AdsManager adsManager) {
    instance.adsManager = adsManager;
  }

  @InjectedFieldSignature("com.streamsaw.ui.home.HomeFragment.authManager")
  public static void injectAuthManager(HomeFragment instance, AuthManager authManager) {
    instance.authManager = authManager;
  }

  @InjectedFieldSignature("com.streamsaw.ui.home.HomeFragment.statusManager")
  public static void injectStatusManager(HomeFragment instance, StatusManager statusManager) {
    instance.statusManager = statusManager;
  }

  @InjectedFieldSignature("com.streamsaw.ui.home.HomeFragment.editor")
  public static void injectEditor(HomeFragment instance, SharedPreferences.Editor editor) {
    instance.editor = editor;
  }

  @InjectedFieldSignature("com.streamsaw.ui.home.HomeFragment.sharedPreferences")
  public static void injectSharedPreferences(HomeFragment instance,
      SharedPreferences sharedPreferences) {
    instance.sharedPreferences = sharedPreferences;
  }
}
